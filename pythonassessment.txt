# Python Answers :
# I have a couple of problems that I would like you to work progressively on paper using python code without any import modules.
# 1. If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23. Find the sum of all the multiples of 3 or 5 below 1000.

result = sum([x for x in range(1000) if (x % 3 == 0 or x % 5 == 0)])
print(result)

# 2. Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ... By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
a, b = 0, 1
total = 0
while True:
    a, b = b, a + b
    if b >= 4000000:
        break
    if b % 2 == 0:
        total += b
print(total)

# Django Questions:

# 1. What command line interface instructions are required to create a django project called ‘company’ and application called ‘staff’?

#>django-admin startproject company
#>django-admin startapp staff


# 2. models.py - Please use the django ORM framework to create the tables below.
#Employee table
#Employee name
#Department
#Email
#Date of birth
#Picture
#Department table
#Department name
#Manager (employee)

from django.db import models
from django.core.files.storage import FileSystemStorage

fs = FileSystemStorage(location='/media/photos')

class Employee(models.Model):
    employee_name = models.CharField(unique=True, max_length=255)
    department = models.CharField(max_length=255)
    email = models.EmailField(max_length=254)
    date_of_birth = models.DateField()
    picture = models.ImageField(storage=fs)


class Department(models.Model):
    department_name = models.CharField(max_length=255)
    manager = models.Foreignkey(Employee)


#3. admin.py - Please implement the code to allow the admin interface to be used to manipulate the database for both the Employee and Department objects. When viewing the Employee objects you should be able to filter by department and date of birth. When creating/editing a Department object there should be inlines for each of the Employee objects in the Department.

from django.contrib import admin
from .models import Employee, Department

@admin.register(Employee)
class EmployeeAdmin(admin.ModelAdmin):
    list_display = ('employee_name', 'date_of_birth')
    list_filter = ('employee_name', 'date_of_birth')
    ordering = ('-employee_name',)
    fieldsets = (('Required Information', {
           'employee_name': "These fields are required for each event.",
           'fields': ('employee_name', 'date_of_birth')
       }),
   )

@admin.register(Department)
class DepartmentAdmin(admin.ModelAdmin):
    list_display = ('department', 'manager')
    list_filter = ('department', 'manager')
    ordering = ('-manager',)
    fieldsets = (('Required Information', {
           'manager': "These fields are required for each event.",
           'fields': ('department', 'manager')
       }),
   )

admin.site.register(Employee)
admin.site.register(Department)


#4. What command line interface instructions are required to be able to test the admin interface after you have completed #2 and #3 above?
python manage.py createsuperuser


#5. views.py (Department) - Using generic class-based views please write the following views for the Department objects: list and detail
from django.http import HttpResponse
from django.views import View
from . import models

class DepartmentView(View):
    def get(self, request):
        result = models.Department.objects.values()
        return HttpResponse('result')

#6. forms.py - Create a ModelForm class to create an Employee object only entering the Employee name and Department fields.
from django import forms
from .models import Employee

class GeeksForm(forms.ModelForm):
    # create meta class
    class Meta:
        # specify model to be used
        model = Employee

        # specify fields to be used
        fields = [
            "employee",
            "department",
        ]

#7. views.py (Employee) - Using a generic class-based view use the form in #6 in a create view for Employee objects. Is your models.py class for Employee compatible with the form and view?
from django.http import HttpResponse
from django.views import View
from . import models

class EmployeeView(View):
    def get(self, request):
        result = models.Employee.objects.values()
        return HttpResponse('result')

#8. What template files would be required for the views in #5 and #7 to work? Where would you put these files?

jinja2 html template files required to view this views.
we will store this files in comman folder which we mentioned in settings.py
STATIC_ROOT = os.path.join(os.path.dirname(BASE_DIR), "static")
STATIC_URL = '/static/'
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, '/static'),
)
